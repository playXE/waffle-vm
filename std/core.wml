let length arr = $asize arr;

let _typeOf = [
    $symbol("null"),
    $symbol("bool"),
    $symbol("int"),
    $symbol("float"),
    $symbol("string"),
    $symbol("array"),
    $symbol("module"),
    $symbol("function"),
    $symbol("primitive"),
    $symbol("object"),
    $symbol("table"), 
    $symbol("symbol"),
    $symbol("abstract"),
];

let TNull = _typeOf[0];
let TBool = _typeOf[1];
let TInt = _typeOf[2];
let TFloat = _typeOf[3];
let TString = _typeOf[4];
let TArray = _typeOf[5];
let TModule = _typeOf[6];
let TFunction = _typeOf[7];
let TPrimitive = _typeOf[8];
let TObject = _typeOf[9];
let TTable = _typeOf[10];
let TSymbol = _typeOf[11];
let TAbstract = _typeOf[12];
let typeOf val = { _typeOf[$typeof(val)] }

let rec toString object = {
    if typeOf object == TArray then 
        let f = ""
        and i = 0 in { 
            while i < length object {
                f = $string_concat(f,toString(object[i]));
                if i != length(object) - 1 then 
                    f = $string_concat(f," ");
                i = i + 1
            };  
            f
        }
    else if typeOf object == TObject then 
        let f = "{"
        and fields = $ofields(object)
        and i = 0 in {
            while i < length fields {
                f = $string_concat(f,toString(fields[i][0]));
                f = $string_concat(f,": ");
                f = $string_concat(f,toString(fields[i][1]));
                if i != length(fields) - 1 then 
                    f = $string_concat(f,",");
                i = i + 1
            };
            f = $string_concat(f,"}");
            f
        }

    else $string(object)
};


let print arg = $print(toString(arg))
let bstr arg = $bstr arg;

export {
    length, 
    typeOf,
    toString,
    print,
    bstr,
    TNull,TBool,TInt,TFloat,TString,TArray,TAbstract,TModule,TFunction,TPrimitive,TObject,TTable
}