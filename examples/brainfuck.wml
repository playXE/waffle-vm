let vec = import std.vec;
let core = import std.core;
let ffi = import std.ffi;
let stack = vec.make 16;
let parse code = 
    let buf = vec.make 16
    and i = 0
    and pc = 0 in 
        {
            while i < $string_length code  {
                match $string_get code i {
                    "+" -> vec.push buf 0,
                    "-" -> vec.push buf 1,
                    ">" -> vec.push buf 2,
                    "<" -> vec.push buf 3,
                    "[" -> {
                        vec.push buf 4;
                        core.print buf.len;
                        vec.push buf 0;
                        vec.push(stack, buf.len - 1);
                    },
                    "]" -> {
                        let jmp_pc = vec.pop stack
                            in {
                                core.print jmp_pc;
                                vec.push buf 5;
                                vec.push buf jmp_pc;
                                buf.arr[jmp_pc] = buf.len - 1;
                            }
                    },  
                    "." -> vec.push buf 6,
                    "," -> vec.push buf 7,
                    _ -> {} 
                };

                i = i + 1;
                pc = pc + 1
            };
            buf
        };
    

let libc = ffi.open("libc.so","libc.dylib","msvc.dll")
and putc = ffi.attach(libc, "putchar", [ffi.i32], ffi.void)
and getc = ffi.attach(libc, "getchar", $amake(0), ffi.i32);
let execute code = {
    let data = $amake2(4096, 0);
    let pc = 0;
    let ptr = 0;
    while pc < code.len {
        match code.arr[pc] {
            0 -> data[ptr] = data[ptr] + 1,
            1 -> data[ptr] = data[ptr] - 1,
            2 -> ptr = ptr + 1,
            3 -> ptr = ptr - 1,
            4 -> {
                pc = pc + 1;
                if data[ptr] == 0 then pc = code.arr[pc];
            },
            5 -> {
                pc = pc + 1;
                if data[ptr] != 0 then pc = code.arr[pc];
            },
            6 -> {
                ffi.call(putc, [data[ptr]]); 
            },
            7 -> {
                data[ptr] = ffi.call getc $amake(0);
            },
            _ -> $throw "unknown opcode"
        };
        pc = pc + 1;
    };
    data
};


let code = parse("+++[>+++++<-]>>+<[>>++++>++>+++++>+++++>+>>+<++[++<]>---]

>++++.>>>.+++++.>------.<--.+++++++++.>+.+.<<<<---.[>]<<.<<<.-------.>++++.
<+++++.+.>-----.>+.<++++.>>++.>-----.

<<<-----.+++++.-------.<--.<<<.>>>.<<+.>------.-..--.+++.-----<++.<--[>+<-]
>>>>>--.--.<++++.>>-.<<<.>>>--.>.

<<<<-----.>----.++++++++.----<+.+++++++++>>--.+.++<<<<.[>]<.>>

,[>>+++[<+++++++>-]<[<[-[-<]]>>[>]<-]<[<+++++>-[<+++>-[<-->-[<+++>-
[<++++[>[->>]<[>>]<<-]>[<+++>-[<--->-[<++++>-[<+++[>[-[-[-[->>]]]]<[>>]<<-]
>[<+>-[<->-[<++>-[<[-]>-]]]]]]]]]]]]]

<[
    -[-[>+<-]>]
    <[<<<<.>+++.+.+++.-------.>---.++.<.>-.++<<<<.[>]>>>>>>>>>]
    <[[<]>++.--[>]>>>>>>>>]
    <[<<++..-->>>>>>]
    <[<<..>>>>>]
    <[<<..-.+>>>>]
    <[<<++..---.+>>>]
    <[<<<.>>.>>>>>]
    <[<<<<-----.+++++>.----.+++.+>---.<<<-.[>]>]
    <[<<<<.-----.>++++.<++.+++>----.>---.<<<.-[>]]
    <[<<<<<----.>>.<<.+++++.>>>+.++>.>>]
    <.>
]>
,]

<<<<<.<+.>++++.<----.>>---.<<<-.>>>+.>.>.[<]>++.[>]<.
>

");

let data = execute(code);
